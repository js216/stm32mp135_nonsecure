diff --git a/arch/arm/boot/dts/stm32mp131.dtsi b/arch/arm/boot/dts/stm32mp131.dtsi
index 0783528d2..fcb137f80 100644
--- a/arch/arm/boot/dts/stm32mp131.dtsi
+++ b/arch/arm/boot/dts/stm32mp131.dtsi
@@ -30,6 +30,43 @@ cpu0: cpu@0 {
 		};
 	};
 
+	clocks {
+		clk_csi: clk-csi {
+			#clock-cells = <0>;
+			compatible = "fixed-clock";
+			clock-frequency = <4000000>;
+			clock-output-names = "ck_csi";
+		};
+
+		clk_hse: clk-hse {
+			#clock-cells = <0>;
+			compatible = "fixed-clock";
+			clock-frequency = <24000000>;
+			clock-output-names = "ck_hse";
+		};
+
+		clk_hsi: clk-hsi {
+			#clock-cells = <0>;
+			compatible = "fixed-clock";
+			clock-frequency = <64000000>;
+			clock-output-names = "ck_hsi";
+		};
+
+		clk_lse: clk-lse {
+			#clock-cells = <0>;
+			compatible = "fixed-clock";
+			clock-frequency = <32768>;
+			clock-output-names = "ck_lse";
+		};
+
+		clk_lsi: clk-lsi {
+			#clock-cells = <0>;
+			compatible = "fixed-clock";
+			clock-frequency = <32000>;
+			clock-output-names = "ck_lsi";
+		};
+	};
+
 	intc: interrupt-controller@a0021000 {
 		compatible = "arm,cortex-a7-gic";
 		#interrupt-cells = <3>;
@@ -87,11 +124,6 @@ scmi_perf: protocol@13 {
 				#clock-cells = <1>;
 			};
 
-			scmi_clk: protocol@14 {
-				reg = <0x14>;
-				#clock-cells = <1>;
-			};
-
 			scmi_reset: protocol@16 {
 				reg = <0x16>;
 				#reset-cells = <1>;
@@ -827,12 +859,12 @@ rcc: rcc@50000000 {
 			reg = <0x50000000 0x1000>;
 			#clock-cells = <1>;
 			#reset-cells = <1>;
-			clock-names = "hse", "hsi", "csi", "lse", "lsi";
-			clocks = <&scmi_clk CK_SCMI_HSE>,
-				 <&scmi_clk CK_SCMI_HSI>,
-				 <&scmi_clk CK_SCMI_CSI>,
-				 <&scmi_clk CK_SCMI_LSE>,
-				 <&scmi_clk CK_SCMI_LSI>;
+			clock-names = "hse", "hsi", "csi", "ck_lse", "lsi";
+			clocks = <&clk_hse>,
+				 <&clk_hsi>,
+				 <&clk_csi>,
+				 <&clk_lse>,
+				 <&clk_lsi>;
 		};
 
 		exti: interrupt-controller@5000d000 {
@@ -1002,7 +1034,7 @@ usbh_ehci: usb@5800d000 {
 		iwdg2: watchdog@5a002000 {
 			compatible = "st,stm32mp1-iwdg";
 			reg = <0x5a002000 0x400>;
-			clocks = <&rcc IWDG2>, <&scmi_clk CK_SCMI_LSI>;
+			clocks = <&rcc IWDG2>, <&clk_lsi>;
 			clock-names = "pclk", "lsi";
 			status = "disabled";
 		};
@@ -1019,8 +1051,8 @@ rtc: rtc@5c004000 {
 			compatible = "st,stm32mp1-rtc";
 			reg = <0x5c004000 0x400>;
 			interrupts-extended = <&exti 19 IRQ_TYPE_LEVEL_HIGH>;
-			clocks = <&scmi_clk CK_SCMI_RTCAPB>,
-				 <&scmi_clk CK_SCMI_RTC>;
+			clocks = <&rcc RTCAPB>,
+				 <&rcc RTC>;
 			clock-names = "pclk", "rtc_ck";
 			status = "disabled";
 		};
diff --git a/arch/arm/boot/dts/stm32mp133.dtsi b/arch/arm/boot/dts/stm32mp133.dtsi
index 41b1c5718..223ca9add 100644
--- a/arch/arm/boot/dts/stm32mp133.dtsi
+++ b/arch/arm/boot/dts/stm32mp133.dtsi
@@ -15,7 +15,7 @@ m_can1: can@4400e000 {
 			interrupts = <GIC_SPI 20 IRQ_TYPE_LEVEL_HIGH>,
 				     <GIC_SPI 22 IRQ_TYPE_LEVEL_HIGH>;
 			interrupt-names = "int0", "int1";
-			clocks = <&scmi_clk CK_SCMI_HSE>, <&rcc FDCAN_K>;
+			clocks = <&clk_hse>, <&rcc FDCAN_K>;
 			clock-names = "hclk", "cclk";
 			bosch,mram-cfg = <0x0 0 0 32 0 0 2 2>;
 			status = "disabled";
@@ -28,7 +28,7 @@ m_can2: can@4400f000 {
 			interrupts = <GIC_SPI 21 IRQ_TYPE_LEVEL_HIGH>,
 				     <GIC_SPI 23 IRQ_TYPE_LEVEL_HIGH>;
 			interrupt-names = "int0", "int1";
-			clocks = <&scmi_clk CK_SCMI_HSE>, <&rcc FDCAN_K>;
+			clocks = <&clk_hse>, <&rcc FDCAN_K>;
 			clock-names = "hclk", "cclk";
 			bosch,mram-cfg = <0x1400 0 0 32 0 0 2 2>;
 			status = "disabled";
diff --git a/drivers/clk/stm32/clk-stm32-core.c b/drivers/clk/stm32/clk-stm32-core.c
index 393364933..9a0a4f06d 100644
--- a/drivers/clk/stm32/clk-stm32-core.c
+++ b/drivers/clk/stm32/clk-stm32-core.c
@@ -13,9 +13,11 @@
 #include <linux/of_address.h>
 #include <linux/slab.h>
 #include <linux/spinlock.h>
+#include <linux/math64.h> /* div64_u64() */
 
 #include "clk-stm32-core.h"
 #include "reset-stm32.h"
+#include "stm32mp13_rcc.h"
 
 static DEFINE_SPINLOCK(rlock);
 
@@ -266,6 +268,90 @@ static int stm32_divider_set_rate(void __iomem *base,
 	return 0;
 }
 
+#define APB_DIV_MASK 0x07
+#define TIM_PRE_MASK 0x01
+
+static unsigned long clk_stm32_timer_recalc_rate(void __iomem *base,
+						 struct clk_stm32_clock_data *data,
+						 u16 timer_id,
+						 unsigned long parent_rate)
+{
+	const struct stm32_timer_cfg *timer = &data->timers[timer_id];
+	u32 prescaler, timpre;
+
+	prescaler = readl(base + timer->apbdiv) & APB_DIV_MASK;
+
+	timpre = readl(base + timer->timpre) & TIM_PRE_MASK;
+
+	if (prescaler == 0U)
+		return parent_rate;
+
+	return parent_rate * (timpre + 1U) * 2U;
+}
+
+#define RCC_OFFSET_PLLXCR		0
+#define RCC_OFFSET_PLLXCFGR1		4
+#define RCC_OFFSET_PLLXCFGR2		8
+#define RCC_OFFSET_PLLXFRACR		12
+#define RCC_OFFSET_PLLXCSGR		16
+
+/* Define characteristic of PLL according type */
+static const struct stm32mp1_pll stm32mp1_pll[PLL_TYPE_NB] = {
+	[PLL_800] = {
+		.refclk_min = 4,
+		.refclk_max = 16,
+	},
+	[PLL_1600] = {
+		.refclk_min = 8,
+		.refclk_max = 16,
+	},
+	[PLL_2000] = {
+		.refclk_min = 8,
+		.refclk_max = 16,
+	}
+};
+
+static unsigned long stm32_pll_get_rate(void __iomem *base,
+					struct clk_stm32_clock_data *data,
+					u16 pll_id,
+					unsigned long parent_rate)
+{
+	const struct stm32_pll_cfg *cfg = &data->plls[pll_id];
+	u32 cfgr1 = 0;
+	u32 fracr = 0;
+	u32 divm = 0;
+	u32 divn = 0;
+	unsigned long fvco = 0UL;
+
+	cfgr1 = readl(base + cfg->reg_pllxcr + RCC_OFFSET_PLLXCFGR1);
+	fracr = readl(base + cfg->reg_pllxcr + RCC_OFFSET_PLLXFRACR);
+
+	divm = (cfgr1 & (RCC_PLL1CFGR1_DIVM1_MASK)) >> RCC_PLL1CFGR1_DIVM1_SHIFT;
+	divn = cfgr1 & RCC_PLL1CFGR1_DIVN_MASK;
+
+	/*
+	 * With FRACV :
+	 *   Fvco = Fck_ref * ((DIVN + 1) + FRACV / 2^13) / (DIVM + 1)
+	 * Without FRACV
+	 *   Fvco = Fck_ref * ((DIVN + 1) / (DIVM + 1)
+	 */
+	if ((fracr & RCC_PLL1FRACR_FRACLE) != 0U) {
+		u32 fracv = (fracr & RCC_PLL1FRACR_FRACV_MASK) >>
+				 RCC_PLL1FRACR_FRACV_SHIFT;
+		unsigned long long numerator = 0UL;
+		unsigned long long denominator = 0UL;
+
+		numerator = (((unsigned long long)divn + 1U) << 13) + fracv;
+		numerator = parent_rate * numerator;
+		denominator = ((unsigned long long)divm + 1U) << 13;
+		fvco = (unsigned long)(div64_u64(numerator, denominator));
+	} else {
+		fvco = (unsigned long)(parent_rate * (divn + 1U) / (divm + 1U));
+	}
+
+	return UDIV_ROUND_NEAREST(fvco, 100000) * 100000;
+};
+
 static u8 clk_stm32_mux_get_parent(struct clk_hw *hw)
 {
 	struct clk_stm32_mux *mux = to_clk_stm32_mux(hw);
@@ -406,6 +492,19 @@ const struct clk_ops clk_stm32_divider_ops = {
 	.set_rate	= clk_stm32_divider_set_rate,
 };
 
+static unsigned long clk_stm32_timer_get_rate(struct clk_hw *hw,
+					      unsigned long parent_rate)
+{
+	struct clk_stm32_timer *tim = to_clk_stm32_timer(hw);
+
+	return clk_stm32_timer_recalc_rate(tim->base, tim->clock_data, tim->timer_id, parent_rate);
+}
+
+
+const struct clk_ops clk_stm32_timer_ops = {
+	.recalc_rate	= clk_stm32_timer_get_rate,
+};
+
 static int clk_stm32_composite_set_rate(struct clk_hw *hw, unsigned long rate,
 					unsigned long parent_rate)
 {
@@ -431,6 +530,8 @@ static unsigned long clk_stm32_composite_recalc_rate(struct clk_hw *hw,
 {
 	struct clk_stm32_composite *composite = to_clk_stm32_composite(hw);
 
+        struct clk_hw *parent_hw = clk_hw_get_parent(hw);
+
 	if (composite->div_id == NO_STM32_DIV)
 		return parent_rate;
 
@@ -623,6 +724,93 @@ const struct clk_ops clk_stm32_composite_ops = {
 	.disable_unused	= clk_stm32_composite_disable_unused,
 };
 
+const struct clk_ops clk_stm32_mlahb_ops = {
+	.set_rate	= clk_stm32_composite_set_rate,
+	.recalc_rate	= clk_stm32_composite_recalc_rate,
+	.round_rate	= clk_stm32_composite_round_rate,
+	.get_parent	= clk_stm32_composite_get_parent,
+	.set_parent	= clk_stm32_composite_set_parent,
+};
+
+static u8 clk_stm32_pll_get_parent(struct clk_hw *hw)
+{
+	struct clk_stm32_pll *pll = to_clk_stm32_pll(hw);
+	const struct stm32_pll_cfg *cfg = &pll->clock_data->plls[pll->pll_id];
+
+	const u8 parent = stm32_mux_get_parent(pll->base, pll->clock_data, cfg->mux_id);
+   return parent;
+}
+
+static unsigned long clk_stm32_pll_recalc_rate(struct clk_hw *hw,
+						     unsigned long parent_rate)
+{
+	struct clk_stm32_pll *pll = to_clk_stm32_pll(hw);
+	const struct stm32_pll_cfg *cfg = &pll->clock_data->plls[pll->pll_id];
+
+	const unsigned long rate = stm32_pll_get_rate(pll->base, pll->clock_data,
+				  pll->pll_id, parent_rate);
+	return rate;
+}
+
+static int clk_stm32_pll_is_enabled(struct clk_hw *hw)
+{
+	struct clk_stm32_pll *pll = to_clk_stm32_pll(hw);
+	const struct stm32_pll_cfg *cfg = &pll->clock_data->plls[pll->pll_id];
+
+	int en = stm32_gate_is_enabled(pll->base, pll->clock_data, cfg->gate_id);
+	return en;
+}
+
+static int clk_stm32_pll_enable(struct clk_hw *hw)
+{
+	struct clk_stm32_pll *pll = to_clk_stm32_pll(hw);
+	const struct stm32_pll_cfg *cfg = &pll->clock_data->plls[pll->pll_id];
+	unsigned long flags = 0;
+
+	if (clk_stm32_pll_is_enabled(hw))
+		return 0;
+
+	spin_lock_irqsave(pll->lock, flags);
+
+	stm32_gate_endisable(pll->base, pll->clock_data, cfg->gate_id, 1);
+
+	spin_unlock_irqrestore(pll->lock, flags);
+	return 0;
+}
+
+static inline void io_clrbits32(volatile void __iomem *addr, u32 clear_mask)
+{
+	iowrite32(ioread32(addr) & ~clear_mask, addr);
+}
+
+static void clk_stm32_pll_disable(struct clk_hw *hw)
+{
+	struct clk_stm32_pll *pll = to_clk_stm32_pll(hw);
+	const struct stm32_pll_cfg *cfg = &pll->clock_data->plls[pll->pll_id];
+	unsigned long flags = 0;
+
+	if (!clk_stm32_pll_is_enabled(hw))
+		return;
+
+	/* Stop all output */
+	io_clrbits32(pll->base + cfg->reg_pllxcr, RCC_PLL1CR_DIVPEN | RCC_PLL1CR_DIVQEN |
+		     RCC_PLL1CR_DIVREN);
+
+	spin_lock_irqsave(pll->lock, flags);
+
+	stm32_gate_endisable(pll->base, pll->clock_data, cfg->gate_id, 0);
+
+	spin_unlock_irqrestore(pll->lock, flags);
+}
+
+const struct clk_ops clk_stm32_pll_ops = {
+	.get_parent	= clk_stm32_pll_get_parent,
+	.recalc_rate	= clk_stm32_pll_recalc_rate,
+	.enable		= clk_stm32_pll_enable,
+	.disable	= clk_stm32_pll_disable,
+	.is_enabled	= clk_stm32_pll_is_enabled,
+};
+
 struct clk_hw *clk_stm32_mux_register(struct device *dev,
 				      const struct stm32_rcc_match_data *data,
 				      void __iomem *base,
@@ -686,6 +874,27 @@ struct clk_hw *clk_stm32_div_register(struct device *dev,
 	return hw;
 }
 
+struct clk_hw *clk_stm32_timer_register(struct device *dev,
+				      const struct stm32_rcc_match_data *data,
+				      void __iomem *base,
+				      spinlock_t *lock,
+				      const struct clock_config *cfg)
+{
+	struct clk_stm32_timer *tim = cfg->clock_cfg;
+	struct clk_hw *hw = &tim->hw;
+	int err;
+
+	tim->base = base;
+	tim->lock = lock;
+	tim->clock_data = data->clock_data;
+
+	err = clk_hw_register(dev, hw);
+	if (err)
+		return ERR_PTR(err);
+
+	return hw;
+}
+
 struct clk_hw *clk_stm32_composite_register(struct device *dev,
 					    const struct stm32_rcc_match_data *data,
 					    void __iomem *base,
@@ -707,6 +916,27 @@ struct clk_hw *clk_stm32_composite_register(struct device *dev,
 	return hw;
 }
 
+struct clk_hw *clk_stm32_pll_register(struct device *dev,
+					    const struct stm32_rcc_match_data *data,
+					    void __iomem *base,
+					    spinlock_t *lock,
+					    const struct clock_config *cfg)
+{
+	struct clk_stm32_pll *pll = cfg->clock_cfg;
+	struct clk_hw *hw = &pll->hw;
+	int err;
+
+	pll->base = base;
+	pll->lock = lock;
+	pll->clock_data = data->clock_data;
+
+	err = clk_hw_register(dev, hw);
+	if (err)
+		return ERR_PTR(err);
+
+	return hw;
+}
+
 #ifdef CONFIG_DEBUG_FS
 
 #include <linux/debugfs.h>
diff --git a/drivers/clk/stm32/clk-stm32-core.h b/drivers/clk/stm32/clk-stm32-core.h
index 39b91a8c3..691d10919 100644
--- a/drivers/clk/stm32/clk-stm32-core.h
+++ b/drivers/clk/stm32/clk-stm32-core.h
@@ -32,12 +32,31 @@ struct stm32_div_cfg {
 	const struct clk_div_table *table;
 };
 
+struct stm32_timer_cfg {
+	u32	apbdiv;
+	u32	timpre;
+};
+
 struct stm32_composite_cfg {
 	int	mux;
 	int	gate;
 	int	div;
 };
 
+enum stm32mp1_plltype {
+	PLL_800,
+	PLL_1600,
+	PLL_2000,
+	PLL_TYPE_NB
+};
+
+struct stm32_pll_cfg {
+	enum stm32mp1_plltype plltype;
+	u16 gate_id;
+	u16 mux_id;
+	u16 reg_pllxcr;
+};
+
 #define NO_ID 0xFFFFFFFF
 
 #define NO_STM32_MUX		0xFFFF
@@ -62,6 +81,8 @@ struct clk_stm32_clock_data {
 	const struct stm32_gate_cfg	*gates;
 	const struct stm32_mux_cfg	*muxes;
 	const struct stm32_div_cfg	*dividers;
+	const struct stm32_timer_cfg	*timers;
+	const struct stm32_pll_cfg	*plls;
 	struct clk_hw *(*is_multi_mux)(struct clk_hw *hw);
 };
 
@@ -158,6 +179,16 @@ struct clk_stm32_div {
 
 #define to_clk_stm32_divider(_hw) container_of(_hw, struct clk_stm32_div, hw)
 
+struct clk_stm32_timer {
+	u16 timer_id;
+	struct clk_hw hw;
+	void __iomem *base;
+	struct clk_stm32_clock_data *clock_data;
+	spinlock_t *lock; /* spin lock */
+};
+
+#define to_clk_stm32_timer(_hw) container_of(_hw, struct clk_stm32_timer, hw)
+
 struct clk_stm32_composite {
 	u16 gate_id;
 	u16 mux_id;
@@ -170,11 +201,31 @@ struct clk_stm32_composite {
 
 #define to_clk_stm32_composite(_hw) container_of(_hw, struct clk_stm32_composite, hw)
 
+struct stm32mp1_pll {
+	uint8_t refclk_min;
+	uint8_t refclk_max;
+};
+
+struct clk_stm32_pll {
+	u16 pll_id;
+	struct clk_hw hw;
+	void __iomem *base;
+	struct clk_stm32_clock_data *clock_data;
+	spinlock_t *lock; /* spin lock */
+};
+
+#define UDIV_ROUND_NEAREST(x, y)	(((x) + ((y) / 2)) / (y))
+
+#define to_clk_stm32_pll(_hw) container_of(_hw, struct clk_stm32_pll, hw)
+
 /* Clock operators */
 extern const struct clk_ops clk_stm32_mux_ops;
 extern const struct clk_ops clk_stm32_gate_ops;
 extern const struct clk_ops clk_stm32_divider_ops;
+extern const struct clk_ops clk_stm32_timer_ops;
 extern const struct clk_ops clk_stm32_composite_ops;
+extern const struct clk_ops clk_stm32_pll_ops;
+extern const struct clk_ops clk_stm32_mlahb_ops;
 
 /* Clock registering */
 struct clk_hw *clk_stm32_mux_register(struct device *dev,
@@ -195,12 +246,24 @@ struct clk_hw *clk_stm32_div_register(struct device *dev,
 				      spinlock_t *lock,
 				      const struct clock_config *cfg);
 
+struct clk_hw *clk_stm32_timer_register(struct device *dev,
+				      const struct stm32_rcc_match_data *data,
+				      void __iomem *base,
+				      spinlock_t *lock,
+				      const struct clock_config *cfg);
+
 struct clk_hw *clk_stm32_composite_register(struct device *dev,
 					    const struct stm32_rcc_match_data *data,
 					    void __iomem *base,
 					    spinlock_t *lock,
 					    const struct clock_config *cfg);
 
+struct clk_hw *clk_stm32_pll_register(struct device *dev,
+					    const struct stm32_rcc_match_data *data,
+					    void __iomem *base,
+					    spinlock_t *lock,
+					    const struct clock_config *cfg);
+
 #define STM32_CLOCK_CFG(_binding, _clk, _sec_id, _struct, _register)\
 {\
 	.id		= (_binding),\
@@ -221,6 +284,14 @@ struct clk_hw *clk_stm32_composite_register(struct device *dev,
 	STM32_CLOCK_CFG(_binding, &(_clk), _sec_id, struct clk_stm32_div *,\
 			&clk_stm32_div_register)
 
+#define STM32_TIMER_CFG(_binding, _clk, _sec_id)\
+	STM32_CLOCK_CFG(_binding, &(_clk), _sec_id, struct clk_stm32_timer *,\
+			&clk_stm32_timer_register)
+
 #define STM32_COMPOSITE_CFG(_binding, _clk, _sec_id)\
 	STM32_CLOCK_CFG(_binding, &(_clk), _sec_id, struct clk_stm32_composite *,\
 			&clk_stm32_composite_register)
+
+#define STM32_PLL_CFG(_binding, _clk, _sec_id)\
+	STM32_CLOCK_CFG(_binding, &(_clk), _sec_id, struct clk_stm32_pll *,\
+			&clk_stm32_pll_register)
diff --git a/drivers/clk/stm32/clk-stm32mp13.c b/drivers/clk/stm32/clk-stm32mp13.c
index 7a5e83457..7408e0e04 100644
--- a/drivers/clk/stm32/clk-stm32mp13.c
+++ b/drivers/clk/stm32/clk-stm32mp13.c
@@ -14,6 +14,14 @@
 
 #define RCC_CLR_OFFSET		0x4
 
+/* STM32 Timer group definition */
+enum enum_timer_grp_cfg {
+	TIMER_TIMG1,
+	TIMER_TIMG2,
+	TIMER_TIMG3,
+	TIMER_NB
+};
+
 /* STM32 Gates definition */
 enum enum_gate_cfg {
 	GATE_LSE,
@@ -297,7 +305,7 @@ static struct stm32_gate_cfg stm32mp13_gates[] = {
 	CFG_GATE_SETCLR(GATE_USBPHY,	RCC_MP_APB4ENSETR,	16),
 	CFG_GATE_SETCLR(GATE_STGENRO,	RCC_MP_APB4ENSETR,	20),
 	CFG_GATE_SETCLR(GATE_LTDC,	RCC_MP_NS_APB4ENSETR,	0),
-	CFG_GATE_SETCLR(GATE_RTCAPB,	RCC_MP_APB5ENSETR,	8),
+	CFG_GATE_SETCLR(GATE_RTCAPB,	RCC_MP_APB5ENSETR,	0),
 	CFG_GATE_SETCLR(GATE_TZC,	RCC_MP_APB5ENSETR,	11),
 	CFG_GATE_SETCLR(GATE_ETZPC,	RCC_MP_APB5ENSETR,	13),
 	CFG_GATE_SETCLR(GATE_IWDG1APB,	RCC_MP_APB5ENSETR,	15),
@@ -459,6 +467,18 @@ static const struct stm32_div_cfg stm32mp13_dividers[DIV_NB] = {
 	CFG_DIV(DIV_ETH2PTP, RCC_ETH12CKSELR, 12, 4, 0, NULL, DIV_NO_RDY),
 };
 
+#define CFG_TIMER(_id, _apbdiv, _timpre)\
+	[(_id)] = {\
+		.apbdiv	= (_apbdiv),\
+		.timpre	= (_timpre),\
+	}
+
+static const struct stm32_timer_cfg stm32mp13_timers[TIMER_NB] = {
+	CFG_TIMER(TIMER_TIMG1, RCC_APB1DIVR, RCC_TIMG1PRER),
+	CFG_TIMER(TIMER_TIMG2, RCC_APB2DIVR, RCC_TIMG2PRER),
+	CFG_TIMER(TIMER_TIMG3, RCC_APB3DIVR, RCC_TIMG3PRER),
+};
+
 /* STM32 Muxes definition */
 enum enum_mux_cfg {
 	MUX_MPU,
@@ -574,6 +594,30 @@ static const struct stm32_mux_cfg stm32mp13_muxes[] = {
 	CFG_MUX_SAFE(MUX_SDMMC2, RCC_SDMMC12CKSELR,	3, 3),
 };
 
+enum stm32_pll_id {
+	PLL1_ID,
+	PLL2_ID,
+	PLL3_ID,
+	PLL4_ID,
+	PLL_NB
+};
+
+#define CFG_PLL(_idx, _type, _gate_id, _mux_id, _reg)\
+	[(_idx)] = {\
+		.gate_id	= (_gate_id),\
+		.mux_id		= (_mux_id),\
+		.plltype	= (_type),\
+		.reg_pllxcr	= (_reg),\
+	}
+
+static const struct stm32_pll_cfg stm32mp13_plls[PLL_NB] = {
+	CFG_PLL(PLL1_ID, PLL_2000, GATE_PLL1, MUX_PLL12, RCC_PLL1CR),
+	CFG_PLL(PLL2_ID, PLL_1600, GATE_PLL2, MUX_PLL12, RCC_PLL2CR),
+	CFG_PLL(PLL3_ID, PLL_800, GATE_PLL3, MUX_PLL3, RCC_PLL3CR),
+	CFG_PLL(PLL4_ID, PLL_800, GATE_PLL4, MUX_PLL4, RCC_PLL4CR),
+};
+
+
 struct clk_stm32_securiy {
 	u32	offset;
 	u8	bit_idx;
@@ -699,6 +743,34 @@ static const struct clk_stm32_securiy stm32mp13_security[] = {
 	SECF(SECF_MCO2, RCC_SECCFGR, RCC_SECCFGR_MCO2SEC),
 };
 
+static const char * const pll2_src[] = {
+	"ck_hsi", "ck_hse",
+};
+
+static const char * const pll3_src[] = {
+	"ck_hsi", "ck_hse", "ck_csi"
+};
+
+static const char * const pll4_src[] = {
+	"ck_hsi", "ck_hse", "ck_csi", "i2s_ckin"
+};
+
+static const char * const per_src[] = {
+	"ck_hsi", "ck_csi", "ck_hse"
+};
+
+static const char * const mpu_src[] = {
+	"ck_hsi", "ck_hse", "pll1_p", "pll1_p_div"
+};
+
+static const char * const axi_src[] = {
+	"ck_hsi", "ck_hse", "pll2_p"
+};
+
+static const char * const mlahb_src[] = {
+	"ck_hsi", "ck_hse", "ck_csi", "pll3_p"
+};
+
 static const char * const adc12_src[] = {
 	"pll4_r", "ck_per", "pll3_q"
 };
@@ -767,6 +839,10 @@ static const char * const sai2_src[] = {
 	"pll4_q", "pll3_q", "i2s_ckin", "ck_per", "spdif_ck_symb", "pll3_r"
 };
 
+static const char * const rtc_src[] = {
+	"off", "ck_lse", "ck_lsi", "ck_hse"
+};
+
 static const char * const sdmmc12_src[] = {
 	"ck_axi", "pll3_r", "pll4_p", "ck_hsi"
 };
@@ -808,10 +884,57 @@ static const char * const usbo_src[] = {
 };
 
 static const char * const usbphy_src[] = {
-	"ck_hse", "pll4_r", "clk-hse-div2"
+	"ck_hse", "pll4_r"
+};
+
+/* Bus clocks */
+static struct clk_stm32_div pclk1 = {
+	.div_id = DIV_APB1,
+	.hw.init = CLK_HW_INIT("pclk1", "ck_mlahb", &clk_stm32_divider_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_div pclk2 = {
+	.div_id = DIV_APB2,
+	.hw.init = CLK_HW_INIT("pclk2", "ck_mlahb", &clk_stm32_divider_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_div pclk3 = {
+	.div_id = DIV_APB3,
+	.hw.init = CLK_HW_INIT("pclk3", "ck_mlahb", &clk_stm32_divider_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_div pclk4 = {
+	.div_id = DIV_APB4,
+	.hw.init = CLK_HW_INIT("pclk4", "ck_axi", &clk_stm32_divider_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_div pclk5 = {
+	.div_id = DIV_APB5,
+	.hw.init = CLK_HW_INIT("pclk5", "ck_axi", &clk_stm32_divider_ops,
+              CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_div pclk6 = {
+	.div_id = DIV_APB6,
+	.hw.init = CLK_HW_INIT("pclk6", "ck_mlahb", &clk_stm32_divider_ops, CLK_IGNORE_UNUSED),
 };
 
 /* Timer clocks */
+static struct clk_stm32_timer timg1_ck = {
+	.timer_id = TIMER_TIMG1,
+	.hw.init = CLK_HW_INIT("timg1_ck", "pclk1", &clk_stm32_timer_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_timer timg2_ck = {
+	.timer_id = TIMER_TIMG2,
+	.hw.init = CLK_HW_INIT("timg2_ck", "pclk2", &clk_stm32_timer_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_timer timg3_ck = {
+	.timer_id = TIMER_TIMG3,
+	.hw.init = CLK_HW_INIT("timg3_ck", "pclk6", &clk_stm32_timer_ops, CLK_IGNORE_UNUSED),
+};
+
 static struct clk_stm32_gate tim2_k = {
 	.gate_id = GATE_TIM2,
 	.hw.init = CLK_HW_INIT("tim2_k", "timg1_ck", &clk_stm32_gate_ops, CLK_SET_RATE_PARENT),
@@ -1133,7 +1256,130 @@ static struct clk_stm32_gate eth2stp = {
 	.hw.init = CLK_HW_INIT("eth2stp", "ck_axi", &clk_stm32_gate_ops, 0),
 };
 
+/* PLL clocks */
+static struct clk_stm32_pll pll2 = {
+	.pll_id = PLL2_ID,
+	.hw.init = CLK_HW_INIT_PARENTS("pll2", pll2_src, &clk_stm32_pll_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_pll pll3 = {
+	.pll_id = PLL3_ID,
+	.hw.init = CLK_HW_INIT_PARENTS("pll3", pll3_src, &clk_stm32_pll_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_pll pll4 = {
+	.pll_id = PLL4_ID,
+	.hw.init = CLK_HW_INIT_PARENTS("pll4", pll4_src, &clk_stm32_pll_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite pll2_p = {
+	.gate_id = GATE_PLL2_DIVP,
+	.mux_id = NO_STM32_MUX,
+	.div_id = DIV_PLL2DIVP,
+	.hw.init = CLK_HW_INIT("pll2_p", "pll2", &clk_stm32_composite_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite pll2_q = {
+	.gate_id = GATE_PLL2_DIVQ,
+	.mux_id = NO_STM32_MUX,
+	.div_id = DIV_PLL2DIVQ,
+	.hw.init = CLK_HW_INIT("pll2_q", "pll2", &clk_stm32_composite_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite pll2_r = {
+	.gate_id = GATE_PLL2_DIVR,
+	.mux_id = NO_STM32_MUX,
+	.div_id = DIV_PLL2DIVR,
+	.hw.init = CLK_HW_INIT("pll2_r", "pll2", &clk_stm32_composite_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite pll3_p = {
+	.gate_id = GATE_PLL3_DIVP,
+	.mux_id = NO_STM32_MUX,
+	.div_id = DIV_PLL3DIVP,
+	.hw.init = CLK_HW_INIT("pll3_p", "pll3", &clk_stm32_composite_ops,
+              CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite pll3_q = {
+	.gate_id = GATE_PLL3_DIVQ,
+	.mux_id = NO_STM32_MUX,
+	.div_id = DIV_PLL3DIVQ,
+	.hw.init = CLK_HW_INIT("pll3_q", "pll3", &clk_stm32_composite_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite pll3_r = {
+	.gate_id = GATE_PLL3_DIVR,
+	.mux_id = NO_STM32_MUX,
+	.div_id = DIV_PLL3DIVR,
+	.hw.init = CLK_HW_INIT("pll3_r", "pll3", &clk_stm32_composite_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite pll4_p = {
+	.gate_id = GATE_PLL4_DIVP,
+	.mux_id = NO_STM32_MUX,
+	.div_id = DIV_PLL4DIVP,
+	.hw.init = CLK_HW_INIT("pll4_p", "pll4", &clk_stm32_composite_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite pll4_q = {
+	.gate_id = GATE_PLL4_DIVQ,
+	.mux_id = NO_STM32_MUX,
+	.div_id = DIV_PLL4DIVQ,
+	.hw.init = CLK_HW_INIT("pll4_q", "pll4", &clk_stm32_composite_ops, CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite pll4_r = {
+	.gate_id = GATE_PLL4_DIVR,
+	.mux_id = NO_STM32_MUX,
+	.div_id = DIV_PLL4DIVR,
+	.hw.init = CLK_HW_INIT("pll4_r", "pll4", &clk_stm32_composite_ops, CLK_IGNORE_UNUSED),
+};
+
+/* System clocks */
+static struct clk_stm32_mux ck_per = {
+	.mux_id = MUX_CKPER,
+	.hw.init = CLK_HW_INIT_PARENTS("ck_per", per_src, &clk_stm32_mux_ops,
+				       CLK_OPS_PARENT_ENABLE | CLK_SET_RATE_PARENT | CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_mux ck_mpu = {
+	.mux_id = MUX_MPU,
+	.hw.init = CLK_HW_INIT_PARENTS("ck_mpu", mpu_src, &clk_stm32_mux_ops,
+				       CLK_OPS_PARENT_ENABLE | CLK_SET_RATE_PARENT | CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite ck_axi = {
+	.gate_id = NO_STM32_GATE,
+	.mux_id = MUX_AXI,
+	.div_id = DIV_AXI,
+	.hw.init = CLK_HW_INIT_PARENTS("ck_axi", axi_src, &clk_stm32_composite_ops,
+				       CLK_OPS_PARENT_ENABLE | CLK_SET_RATE_PARENT | CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_composite ck_mlahb = {
+	.gate_id = NO_STM32_GATE,
+	.mux_id = MUX_MLAHB,
+	.div_id = DIV_MLAHB,
+	.hw.init = CLK_HW_INIT_PARENTS("ck_mlahb", mlahb_src, &clk_stm32_mlahb_ops,
+              CLK_IGNORE_UNUSED | CLK_IS_CRITICAL),
+};
+
 /* Kernel clocks */
+static struct clk_stm32_composite ck_rtc = {
+	.gate_id = GATE_RTCCK,
+	.mux_id = MUX_RTC,
+	.div_id = NO_STM32_DIV,
+	.hw.init = CLK_HW_INIT_PARENTS("ck_rtc", rtc_src, &clk_stm32_composite_ops,
+				       CLK_OPS_PARENT_ENABLE | CLK_SET_RATE_NO_REPARENT | CLK_IGNORE_UNUSED),
+};
+
+static struct clk_stm32_gate rtcapb = {
+	.gate_id = GATE_RTCAPB,
+	.hw.init = CLK_HW_INIT("rtcapb", "pclk5", &clk_stm32_gate_ops,
+              CLK_IGNORE_UNUSED),
+};
+
 static struct clk_stm32_composite sdmmc1_k = {
 	.gate_id = GATE_SDMMC1,
 	.mux_id = MUX_SDMMC1,
@@ -1530,7 +1776,18 @@ static struct clk_stm32_composite ck_trace = {
 };
 
 static const struct clock_config stm32mp13_clock_cfg[] = {
+	/* Bus clocks */
+	STM32_DIV_CFG(PCLK1, pclk1, SECF_NONE),
+	STM32_DIV_CFG(PCLK2, pclk2, SECF_NONE),
+	STM32_DIV_CFG(PCLK3, pclk3, SECF_NONE),
+	STM32_DIV_CFG(PCLK4, pclk4, SECF_NONE),
+	STM32_DIV_CFG(PCLK5, pclk5, SECF_NONE),
+	STM32_DIV_CFG(PCLK6, pclk6, SECF_NONE),
+
 	/* Timer clocks */
+	STM32_TIMER_CFG(CK_TIMG1, timg1_ck, SECF_NONE),
+	STM32_TIMER_CFG(CK_TIMG2, timg2_ck, SECF_NONE),
+	STM32_TIMER_CFG(CK_TIMG3, timg3_ck, SECF_NONE),
 	STM32_GATE_CFG(TIM2_K, tim2_k, SECF_NONE),
 	STM32_GATE_CFG(TIM3_K, tim3_k, SECF_NONE),
 	STM32_GATE_CFG(TIM4_K, tim4_k, SECF_NONE),
@@ -1598,7 +1855,29 @@ static const struct clock_config stm32mp13_clock_cfg[] = {
 	STM32_GATE_CFG(ETH1STP, eth1stp, SECF_ETH1STP),
 	STM32_GATE_CFG(ETH2STP, eth2stp, SECF_ETH2STP),
 
+	/* PLL clocks */
+	STM32_PLL_CFG(PLL2, pll2, SECF_NONE),
+	STM32_PLL_CFG(PLL3, pll3, SECF_NONE),
+	STM32_PLL_CFG(PLL4, pll4, SECF_NONE),
+	STM32_COMPOSITE_CFG(PLL2_P, pll2_p, SECF_NONE),
+	STM32_COMPOSITE_CFG(PLL2_Q, pll2_q, SECF_NONE),
+	STM32_COMPOSITE_CFG(PLL2_R, pll2_r, SECF_NONE),
+	STM32_COMPOSITE_CFG(PLL3_P, pll3_p, SECF_NONE),
+	STM32_COMPOSITE_CFG(PLL3_Q, pll3_q, SECF_NONE),
+	STM32_COMPOSITE_CFG(PLL3_R, pll3_r, SECF_NONE),
+	STM32_COMPOSITE_CFG(PLL4_P, pll4_p, SECF_NONE),
+	STM32_COMPOSITE_CFG(PLL4_Q, pll4_q, SECF_NONE),
+	STM32_COMPOSITE_CFG(PLL4_R, pll4_r, SECF_NONE),
+
+	/* System clocks */
+	STM32_MUX_CFG(CK_PER, ck_per, SECF_NONE),
+	STM32_MUX_CFG(CK_MPU, ck_mpu, SECF_NONE),
+	STM32_COMPOSITE_CFG(CK_AXI, ck_axi, SECF_NONE),
+	STM32_COMPOSITE_CFG(CK_MLAHB, ck_mlahb, SECF_NONE),
+
 	/* Kernel clocks */
+	STM32_COMPOSITE_CFG(RTC, ck_rtc, SECF_NONE),
+	STM32_GATE_CFG(RTCAPB, rtcapb, SECF_NONE),
 	STM32_COMPOSITE_CFG(SDMMC1_K, sdmmc1_k, SECF_SDMMC1),
 	STM32_COMPOSITE_CFG(SDMMC2_K, sdmmc2_k, SECF_SDMMC2),
 	STM32_COMPOSITE_CFG(FMC_K, fmc_k, SECF_FMC),
@@ -1713,6 +1992,8 @@ static struct clk_stm32_clock_data stm32mp13_clock_data = {
 	.gates		= stm32mp13_gates,
 	.muxes		= stm32mp13_muxes,
 	.dividers	= stm32mp13_dividers,
+	.timers		= stm32mp13_timers,
+	.plls		= stm32mp13_plls,
 	.is_multi_mux	= stm32mp13_is_multi_mux,
 };
 
@@ -1761,45 +2042,11 @@ static int stm32mp1_rcc_init(struct device *dev)
 	return ret;
 }
 
-static int get_clock_deps(struct device *dev)
-{
-	static const char * const clock_deps_name[] = {
-		"hsi", "hse", "csi", "lsi", "lse",
-	};
-	size_t deps_size = sizeof(struct clk *) * ARRAY_SIZE(clock_deps_name);
-	struct clk **clk_deps;
-	int i;
-
-	clk_deps = devm_kzalloc(dev, deps_size, GFP_KERNEL);
-	if (!clk_deps)
-		return -ENOMEM;
-
-	for (i = 0; i < ARRAY_SIZE(clock_deps_name); i++) {
-		struct clk *clk = of_clk_get_by_name(dev_of_node(dev),
-						     clock_deps_name[i]);
-
-		if (IS_ERR(clk)) {
-			if (PTR_ERR(clk) != -EINVAL && PTR_ERR(clk) != -ENOENT)
-				return PTR_ERR(clk);
-		} else {
-			/* Device gets a reference count on the clock */
-			clk_deps[i] = devm_clk_get(dev, __clk_get_name(clk));
-			clk_put(clk);
-		}
-	}
-
-	return 0;
-}
-
 static int stm32mp1_rcc_clocks_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
-	int ret = get_clock_deps(dev);
-
-	if (!ret)
-		ret = stm32mp1_rcc_init(dev);
 
-	return ret;
+	return stm32mp1_rcc_init(dev);
 }
 
 static int stm32mp1_rcc_clocks_remove(struct platform_device *pdev)
@@ -2130,26 +2377,6 @@ static const char * const ref4_parents[] = {
 	"ck_hsi", "ck_hse", "ck_csi", "i2s_ckin"
 };
 
-static const char * const cpu_src[] = {
-	"ck_hsi", "ck_hse", "pll1_p", "pll1_p_div"
-};
-
-static const char * const axi_src[] = {
-	"ck_hsi", "ck_hse", "pll2_p"
-};
-
-static const char * const mlahb_src[] = {
-	"ck_hsi", "ck_hse", "ck_csi", "pll3_p"
-};
-
-static const char * const per_src[] = {
-	"ck_hsi", "ck_csi", "ck_hse"
-};
-
-static const char * const rtc_src[] = {
-	"off", "ck_lse", "ck_lsi", "ck_hse"
-};
-
 static struct clk_summary stm32mp13_clock_summary[] = {
 	CS_OSC("ck_hsi", GATE_HSI),
 	CS_OSC("ck_csi", GATE_CSI),
@@ -2180,7 +2407,7 @@ static struct clk_summary stm32mp13_clock_summary[] = {
 	CS_GATEDIV("pll4_q", "pll4", GATE_PLL4_DIVQ, DIV_PLL4DIVQ),
 	CS_GATEDIV("pll4_r", "pll4", GATE_PLL4_DIVR, DIV_PLL4DIVR),
 
-	CS_MUX("ck_mpu", cpu_src, MUX_MPU),
+	CS_MUX("ck_mpu", mpu_src, MUX_MPU),
 	CS_MUX("ck_axi", axi_src, MUX_AXI),
 	CS_MUX("ck_mlahb", mlahb_src, MUX_MLAHB),
 	CS_MUX("ck_per", per_src, MUX_CKPER),
@@ -2194,7 +2421,7 @@ static struct clk_summary stm32mp13_clock_summary[] = {
 
 	CS_STM32_TIMER("timg1_ck", "pclk1", RCC_APB1DIVR, RCC_TIMG1PRER),
 	CS_STM32_TIMER("timg2_ck", "pclk2", RCC_APB2DIVR, RCC_TIMG2PRER),
-	CS_STM32_TIMER("timg3_ck", "pclk1", RCC_APB6DIVR, RCC_TIMG3PRER),
+	CS_STM32_TIMER("timg3_ck", "pclk1", RCC_APB6DIVR, RCC_TIMG3PRER), // TODO: isn't paren't pclk6???
 
 	CS_GATE("tim2_k", "timg1_ck", GATE_TIM2),
 	CS_GATE("tim3_k", "timg1_ck", GATE_TIM3),
